{"version":3,"file":"main.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA,MAAMA,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,eAAe,CAAC;AACzD,MAAMC,SAAS,GAAGF,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;AAEhDF,SAAS,CAACI,gBAAgB,CAAC,OAAO,EAAE,MAAM;EACtCD,SAAS,CAACE,SAAS,CAACC,MAAM,CAAC,YAAY,CAAC;AAC5C,CAAC,CAAC;AAIF,IAAIC,cAAc,GAAGN,QAAQ,CAACO,gBAAgB,CAAC,OAAO,CAAC;AAEvD,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;EACnDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;IACzB,IAAIA,KAAK,CAACC,cAAc,EAAE;MACxBD,KAAK,CAACE,MAAM,CAACV,SAAS,CAACW,GAAG,CAAC,UAAU,CAAC;IACxC,CAAC,MAAI;MACHH,KAAK,CAACE,MAAM,CAACV,SAAS,CAACY,MAAM,CAAC,UAAU,CAAC;IAC3C;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,SAAS,EAAE;AACb,CAAC,CAAC;AAEJX,cAAc,CAACK,OAAO,CAAEO,OAAO,IAAKV,QAAQ,CAACW,OAAO,CAACD,OAAO,CAAC,CAAC,C","sources":["webpack://soinproduction/webpack/bootstrap","webpack://soinproduction/webpack/runtime/make namespace object","webpack://soinproduction/./src/js/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const mobileNav = document.querySelector('.js-mobileNav');\nconst bodyClass = document.querySelector('body');\n\nmobileNav.addEventListener('click', () => {\n    bodyClass.classList.toggle('nav-active');\n});\n\n\n\nlet observSections = document.querySelectorAll('.mark');\n\nconst observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {  \n        entry.target.classList.add('animated');\n      }else{\n        entry.target.classList.remove('animated');\n      }\n    });\n  }, {\n    threshold: 0.4\n  });\n  \nobservSections.forEach((section) => observer.observe(section));"],"names":["mobileNav","document","querySelector","bodyClass","addEventListener","classList","toggle","observSections","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","add","remove","threshold","section","observe"],"sourceRoot":""}